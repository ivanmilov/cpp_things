// Find the longest common subsequence (LCS) of two given strings.
//
// Example: given string "abfzwa", "cafz", their longest common subsequence is "afz".
// In the case there are many possible longest common sequence, returning any of them
// is fine (for example, if the second string in the above example would be "bafz"
// instead of "cafz", there would be two possible answer: "afz" and "bfz". Any of them
// is a valid answer).

#include <iostream>
#include <string_view>

constexpr char kSequence1[] = "CGTTTTGAGAal;ksdjfkgajblvlasrjvluiaerbfvujasf yasdgcvlpsdnmfvkjanergp[o";
constexpr char kSequence2[] = "AGCCGCCACTahjgasdvbfyutfqwefjkbadfjkvlsrpfivhRGC08Q7HF Jfjvlrbkghzvdsjkl";

// CGTTTTGAGA
// AGCCGCCACT

size_t N{0};

std::string LCS(std::string_view s1, std::string_view s2, bool recursion = false)
{
    N++;
    if (s1.empty() || s2.empty())
        return "";

    if (!recursion)
    {
        std::string max{};
        std::string ll[s1.size() + 1][s2.size() + 1];
        for (size_t i = 0; i <= s1.size(); ++i)
        {
            for (size_t j = 0; j <= s2.size(); ++j)
            {
                if (i == 0 || j == 0)
                {
                    ll[i][j] = "";
                    continue;
                }
                if (s1[i - 1] == s2[j - 1])
                {
                    ll[i][j] = ll[i - 1][j - 1] + s1[i - 1];
                }
                else
                {
                    ll[i][j] = ll[i - 1][j].size() > ll[i][j - 1].size() ? ll[i - 1][j] : ll[i][j - 1];
                }

                if (ll[i][j].size() > max.size())
                {
                    max = ll[i][j];
                }
            }
        }

        return max;
    }
    else
    {
        if (s1.length() > 15 || s2.length() > 15)
        {
            std::cerr << "Too long strings to use recursion!" << std::endl;
            return "";
        }
        std::string lcs{};
        if (s1.back() == s2.back())
        {
            lcs = s1.back();
            return LCS(std::string_view(s1.data(), s1.size() - 1), std::string_view(s2.data(), s2.size() - 1)) + lcs;
        }

        auto l1 = LCS(std::string_view(s1.data(), s1.size() - 1), s2) + lcs;
        auto l2 = LCS(s1, std::string_view(s2.data(), s2.size() - 1)) + lcs;
        return l1.size() > l2.size() ? l1 : l2;
    }
}

int main()
{
    std::cout << LCS(kSequence1, kSequence2) << std::endl;
    std::cout << N << std::endl;

    return 0;
}

// "ACAATTAATTAGGACTATATGGTTCAACACAACATTGCAGGGCAAACTATGGGGGGTTGCTCGATACCAACCGT"
// "GACGGCCCTAATGTGGCACGAAATTTTTTACCCTTAGACGTGCCACGGCAGAGAGCGCTGAAGCGCGGGTACAC"
// "CGAACAATGATAAAAATTGGTTATAATGCCAGAGAAATATTTCGGCTGTTGTTCATTAGACGGGCCAAGTGCCC"
// "AAGGGTCTGATCATCCTCAGCTTTCGTGATGGAAGATTGAGCGGCACCTCGACCGTAACAATGTCATGTCTCAT"
// "ATATGTGCCTACCTCCTCATGGTAAAAAAAAGTCACCACCTCCGACCAGGGGGCTCAGGGACAAGAGACGTGCG"
// "TGACAGGAATTGGTCATTACAACCGGCTAGAACGTATTTCAACACCCAACCTCAGATCATTGCCAGGCATTCGG"
// "TTACTCCTGCACGACACCAACCAGCGGTCTCCCTACAGCCTCATGAACTACATCGACTAGGCGGTGATTCGCAA"
// "CCTACATATATTTACAGCTCGACTACGAAATTGCCCATTGCAAGGGTTGCATCAAAATGCTGTTATATAAGATG"
// "GCGATTACCAATCGTGCCTCGCGGATTTTCGCGTCACGCATCCGTACCACGAACGTGCATGGTTTACTCGGGGA"
// "GCGGAAATTGGGGCGCGGAAACTCGCAGATACATTCGAAACTCTGTAGGGCGCAACTTGAGGCCCTGGTTAAAA"
// "AGCTATGACATAGTTCTTACAATGCTTTCAGTTACCATTTGACATCCGATCGCTTCTATATGGACCCCACTAGT"
// "GCATTCCAGACGTTCGTTTGCTCTTGCGCCTGGAAATCAATTCATTGTGATAAAACGTTTTACCTTGACCGCGT"
// "ACACTGTCTCCGTTGGGTGCGAAGGAGCCTTTATCAGGCTCGGGGAAATACCCCGGTCCGGGTAACAACGGACT"
// "GCCACTTGATTATAAACGGCATATGTCACTCGCTCGTGAACTCGAATGAAGACATAAACCAGGACCATTTGATC"
// "GCATGGCGGAAACTTTGCTTCGCAATGAGCTTTGATTGTATAAGTGGTATGAGGGACCTAACGGCACGGTCGAC"
// "TGGCGACGTTGTCTCTGGAGCTCTATTGCAACGCACTATGGGGAAACTCCCCGACTTGCGGGCCGGATACGTCC"
// "CCCTTGGATTTACTCAATACGCGGACGAAGGCGGTCGAAAAAGCTACAAGGTCTACTATGTTTACTTTTACCTC"
// "AATCCATGTTTCTATGACAGGTGGTCTTTAGGCGCAAGAGTTAGTCCGACAGGGGTGGCGCCATTACAGAATCT"
// "GATATTCCCTCTACCCTACGTTTCTACTGCTTTTTCGGATGGGTTGTCCCGACTATCGATCGTGAGTGGAGTGA"
// "CCCCTAGGATATCTGAGCCGTAAGGTTCCCAGGAGAAAAGCAAAAATGATGTCGGATTGAGGGTTACTATCTTC"
// "GGCTGTGGACAACTTGTTCATACTTTAATCTCCGCCACTGGAGACAAGGATGCCCGCATTTACGATCACGGGTC"
// "GCTGACGAGACTCTCGATCACTATAGCTTGCTACGTTCGAATTGCCACAATGTCTTTCCCAGCCCCGATGGTGG"
// "CGCACGGAATAGCGAGAAACGTGACGTTCCGTGTGCTCCGGATTGGTGCATATGGCTTGAGATTTGACCAAACG"
// "TTCGGGCGCACCGTGGCGAGGGTCACGATGCATAGGTGAGTACCATATGTATGGCGGGCGATGAACGCCTTGTG"
// "TGTGACCGGATGAGTCAACCTAAGTCGACTGAAGGTGCGGCGCCCTGTCGCATGGCAGGTACACCAGAGAAATA"
// "AACCATGCACGCAAAACACCTTTAGTGGCGCATCTCAGTCGCGTTTCAGGTTGCATTATCTATCGCTTGCATGA"
// "CGAGCTCCAGGTACAGGCCCCACCAAGGTACCGTAACGCCCCCCGATACTCTGATATGGTAATACTTTCAACGT"
// "TGGAATGAAATGCCGGACCTCAACCGATTCGCTGACCACCCGCGCCGGACCTGTCGGGCAACCTGGTCTCACAC"
// "ACATTGCGAGACATTAGTCTGAATGTACCAGGGTAAGCGGTAGGCAAGACACTCCGTTTCGGCGGTTTTCTAGT"
// "CACAAATGACCTAAGGCACGCCCACGACGCCAAGGAACCCACAGAGAATCGGACTAATTAGTCTCCACCGGAAA"
// "GGTGGGCTTGGTCCTCACTTCAACAGGCCCAATTCATGTCAGACGTATAGGATCGCCCCCATTGAAGCTGAGCC"
// "TGAAGGGGCGTAGTGGTGCGGGAGTTAATCGACACTAGGGAGCGGGTGTGAGTTGAGTCCTCCAGTTATCCATT"
// "CAAGGATCGCATTACCATCCAAGCTAATATCATCCTACTCTAGGGAGCAGACCGTGTTCAGCTGGACGATACCA"
// "CCCGTGTAGGCAGAAGGAGAAGCCCGTAGCCCATGGCACGGGGAGAAAGAGTGGTTACTGCAACATTTAAGTGA"
// "TTTACAAACGAAGCGTGCATGCCTCATAGTGCGGTCCGGTCAACGGAAACTCGCCCAATTCTTAAGTCTGCAAG"
// "CGCTTCAGGGGCGAATTCAGCCTAGGCACTTTAAACAGTAGATGACCACCCGGGAGGACGCTCGGACCTCCTCG"
// "ATCTGCAGGGTCAGAGCGCACCCACTGAATGGCTCCCCCACAAGATAAGTTTGGCCAAGCTAGTCTAGGTATAT"
// "GCTTGACTGGCCAGTGTATCCCCATTTGATACTGAACATTACTAAGTACCACCACCAATGTGCATCAGGACGCC"
// "AAGTCCTTTATTTGTAGTGCCTCAGAATTCCCTAAGAGGCCCCCCACTAGGTGGTTCCGCCTACCGTAAATGTT"
// "ATAGAAGAACTGCAGCGCCTGATTACAAGTGCGCATTTATGACTAGATCGGAGGTTCCGTGAAAGTTTCGTGTC"
// "TATCTACGCTCCCACTTACTAGCTCCTTACAAACTTCCAGAGCGGAACCTGAAGACTTACCGCCAGCCTTTCTA"
// "CTATTAAGTCCGGAGGGGCTATGGCGCTTCGTTCCTGGAGTTTAGATTATACGGGGCCATGTAGTTGACTCTAG"
// "ATGTAATGCGCACAATTGTGTATAAGCGCCTTTCGTCACAGTCCATCCGATGCAAACTTTTAGGAGGTTAAAAG"
// "AATTGTGTACCTTGAACGTATTTTAAGAGACGCGCGCTCTACTGGTGATGGCTAGGGGACACATTTTATGCCAC"
// "ACGCGGACATGGGCTGCTAACCACCGACTGAGCCCAAAGTGTTTCCAGGCACACCACCTACAACCTTATTGCGC"
// "CTGACCAACCCTCCCAATTACGATAGAATTTAATTACTTAACTTGAACGCCGACATAAGCCGACCAGACGGCGC"
// "ATACGGACGACTAGGTATCGCGAGTCAACACCATTGAGCATTCCGCTGGACAGTGACGCGGACGCAAACGCACC"
// "ATACGAGCCGTTCTAGCAGGTGTCTGTCCGTAGTTCCCACGCTTGTACCTAGAGCTGTGCGTGAATCCATATCT"
// "AGGTGTACATGGATTGAAAGTTAGAGCGCTTTGGCGCTCAGATGCTATTCCTCGTGGCATGATGCGAAATTCCC"
// "CTGAGGCCTTCATCACAACCTCTTAAGAAACATTACCTTAGCATCGGGTGTGGGTGAGCTGTGTCTGCGACTCC"
// "GCCGAACTGTCGAAGTCACTGAACCGAAGAGACTCCGCCTTTTCCTGAACACCTTTTCTTGCAGTTTGGCATTC"
// "GGTGGCCCACAGGTAGCCACTTCGGTACGTAGGTCTGGCGTGCGGTATTACATCGGTTGACGTCAACCGAGGAG"
// "AAGCGACGCAGACCACAGAGTACAGACCGGCAAGACCTTATGCACTTCCCCCCCGCCTGGGCCTGATGCTAATC"
// "CCCTACGAGCTCCGGCCATCCAGAAAGACTCTTCTGAACACTGAAGAGGCAAAAGATAACTAATGTGGTGGATG"
// "CCGA";
